# -*- coding: utf-8 -*-
"""greedy_best_first.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QrMW38uJrjNXd4NDTbw3MW4wwBPxkdC4
"""

# -*- coding: utf-8 -*-
"""greedy_best_first

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U3CdDJpn_IniLwV3jM2338VfuN4fwCQH
"""

# -*- coding: utf-8 -*-
"""greedy_best_first

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/151IVDvqJGabrnju5eVKIJcp7LOaCFxqr
"""

from queue import PriorityQueue

# Fungsi untuk algoritma Greedy Search
def greedy_search(graph, start, goal):
  frontier = PriorityQueue()
  frontier.put((start, 0))  # Menggabungkan start dan 0 ke dalam tuple
  explored = set()

  while not frontier.empty():
    current_node, cost = frontier.get()
    if current_node == goal:
      print("Simpul tujuan sudah ditemukan!")
      return True

    explored.add(current_node)

    # Check if current_node is in the graph to avoid KeyError
    if current_node in graph:
        for neighbor in graph[current_node]:
            if neighbor not in explored:
                # Check if neighbor has a heuristic value
                if neighbor in heuristic:
                    priority = heuristic[neighbor]
                    frontier.put((neighbor, priority))  # Menggabungkan neighbor dan priority ke dalam tuple
                else:
                    print(f"Heuristic value not found for neighbor: {neighbor}")  # Print a message if heuristic is missing
    else:
        print(f"Current node not found in graph: {current_node}")  # Print a message if current node is not in the graph

  print("Simpul tidak ditemukan!")
  return False

heuristic = {
    'A': 9,
    'B': 4,
    'C': 2,
    'D': 5,
    'E': 3,
    'F': 7,
    'G': 0,
    'S': 10 # Adding heuristic for the start node
}

graph = {
    'S': {'A', 'E'},
    'B': {'B', 'C'},
    'C': {'D'},
    'D': {'G'},
    'E': {'G'},
    'F': {'D'},
    'A': {'B'}, # Adding node 'A' and its neighbors
    'E': {'F'} # Adding neighbour to E
}

start_node = 'S'
goal_node = 'G'

greedy_search(graph, start_node, goal_node)